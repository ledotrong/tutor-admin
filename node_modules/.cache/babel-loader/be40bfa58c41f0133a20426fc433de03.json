{"ast":null,"code":"import \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/upload/style\";\nimport _Upload from \"antd/es/upload\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nvar _jsxFileName = \"/Users/trongledo/Documents/GitHub/tutor-admin/src/views/Accounts/AddModal.js\";\nimport React, { Component } from 'react';\nconst Option = _Select.Option;\n\n_message.config({\n  top: 70\n});\n\nclass AddModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: null,\n      loading: false,\n      role: 'admin',\n      name: '',\n      email: '',\n      picture: null,\n      address: '',\n      password: ''\n    };\n    this.onChangeHandler = this.onChangeHandler.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.handleUpload = this.handleUpload.bind(this);\n  }\n\n  componentDidMount() {\n    const token = JSON.parse(localStorage.getItem('token'));\n    if (token) this.setState({\n      token\n    });\n  }\n\n  onChangeHandler(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onRoleChange(role) {\n    this.setState({\n      role\n    });\n  }\n\n  beforeUpload(file) {\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n\n    if (!isJpgOrPng) {\n      _message.error('You can only upload JPG/PNG file!');\n    }\n\n    const isLt2M = file.size / 1024 / 1024 < 2;\n\n    if (!isLt2M) {\n      _message.error('Image must smaller than 2MB!');\n    }\n\n    return isJpgOrPng && isLt2M;\n  }\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        return data;\n      }\n\n      return data;\n    });\n  }\n\n  handleUpload(info) {\n    if (info.file.status === 'uploading') {\n      this.setState({\n        loading: true\n      });\n      return;\n    }\n\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      this.getBase64(info.file.originFileObj, picture => this.setState({\n        picture,\n        loading: false\n      }));\n    }\n  }\n\n  getBase64(img, callback) {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => callback(reader.result));\n    reader.readAsDataURL(img);\n  }\n\n  async onSubmit(e) {\n    e.preventDefault();\n    this.setState({\n      loading: true\n    });\n    this.props.load();\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.state.token}`\n      },\n      body: JSON.stringify({\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password,\n        address: this.state.address,\n        role: this.state.role,\n        picture: this.state.picture ? this.state.picture : undefined\n      })\n    };\n\n    try {\n      const response = await fetch('https://cors-anywhere.herokuapp.com/https://admin-api-tutor.herokuapp.com/user/register', requestOptions);\n      let data = await this.handleResponse(response);\n      if (data.newUser) _message.success('Account created successfully');else _message.error(data);\n      this.setState({\n        loading: false\n      });\n      this.props.loaded();\n      this.props.handleCancel();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const modalVisible = this.props.modalVisible;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 18\n        },\n        sm: {\n          span: 5\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 28\n        },\n        sm: {\n          span: 17\n        }\n      }\n    };\n    const uploadButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(_Icon, {\n      type: this.state.loading ? 'loading' : 'plus',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ant-upload-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Upload\"));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(_Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(_Modal, {\n      title: \"Create New Account\",\n      visible: modalVisible,\n      onOk: () => this.onSubmit(),\n      onCancel: this.props.handleCancel,\n      footer: [React.createElement(_Button, {\n        onClick: this.props.handleCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(_Button, {\n        key: \"Submit\",\n        loading: this.state.loading,\n        type: \"primary\",\n        onClick: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Submit\")],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(_Upload, {\n      name: \"avatar\",\n      listType: \"picture-card\",\n      className: \"avatar-uploader d-flex justify-content-center mb-2\",\n      showUploadList: false,\n      action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n      beforeUpload: this.beforeUpload,\n      onChange: this.handleUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, this.state.picture ? React.createElement(\"img\", {\n      src: this.state.picture,\n      alt: \"avatar\",\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }) : uploadButton), React.createElement(_Form.Item, {\n      label: \"Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      name: \"name\",\n      required: true,\n      placeholder: \"your full name\",\n      onChange: this.onChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })), React.createElement(_Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      name: \"email\",\n      required: true,\n      placeholder: \"example@email\",\n      onChange: this.onChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    })), React.createElement(_Form.Item, {\n      label: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(_Input.Password, {\n      name: \"password\",\n      placeholder: \"at least 6 characters\",\n      onChange: this.onChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    })), React.createElement(_Form.Item, {\n      label: \"Address\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      name: \"address\",\n      required: true,\n      placeholder: \"Eg: 123 Street, Ward,...\",\n      onChange: this.onChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })), React.createElement(_Form.Item, {\n      label: \"Role\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(_Select, {\n      value: this.state.role,\n      size: this.props.size,\n      style: {\n        width: '32%'\n      },\n      onChange: value => this.onRoleChange(value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"admin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Admin\"), React.createElement(Option, {\n      value: \"master\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Master\"))))));\n  }\n\n}\n\nexport default AddModal;","map":{"version":3,"sources":["/Users/trongledo/Documents/GitHub/tutor-admin/src/views/Accounts/AddModal.js"],"names":["React","Component","Option","config","top","AddModal","constructor","props","state","token","loading","role","name","email","picture","address","password","onChangeHandler","bind","onSubmit","handleUpload","componentDidMount","JSON","parse","localStorage","getItem","setState","e","target","value","onRoleChange","beforeUpload","file","isJpgOrPng","type","error","isLt2M","size","handleResponse","response","text","then","data","ok","info","status","getBase64","originFileObj","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","preventDefault","load","requestOptions","method","headers","Authorization","body","stringify","undefined","fetch","newUser","success","loaded","handleCancel","err","console","log","render","modalVisible","formItemLayout","labelCol","xs","span","sm","wrapperCol","uploadButton","handleSubmit","width"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;MAYQC,M,WAAAA,M;;AACR,SAAQC,MAAR,CAAe;AACbC,EAAAA,GAAG,EAAE;AADQ,CAAf;;AAIA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAC/BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,IAAI,EAAE,OAHK;AAIXC,MAAAA,IAAI,EAAE,EAJK;AAKXC,MAAAA,KAAK,EAAE,EALI;AAMXC,MAAAA,OAAO,EAAE,IANE;AAOXC,MAAAA,OAAO,EAAE,EAPE;AAQXC,MAAAA,QAAQ,EAAE;AARC,KAAb;AAWA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDG,EAAAA,iBAAiB,GAAG;AAClB,UAAMZ,KAAK,GAAGa,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAd;AACA,QAAIhB,KAAJ,EAAW,KAAKiB,QAAL,CAAc;AAAEjB,MAAAA;AAAF,KAAd;AACZ;;AAEDQ,EAAAA,eAAe,CAACU,CAAD,EAAI;AACjB,SAAKD,QAAL,CAAc;AAAE,OAACC,CAAC,CAACC,MAAF,CAAShB,IAAV,GAAiBe,CAAC,CAACC,MAAF,CAASC;AAA5B,KAAd;AACD;;AAEDC,EAAAA,YAAY,CAACnB,IAAD,EAAO;AACjB,SAAKe,QAAL,CAAc;AAAEf,MAAAA;AAAF,KAAd;AACD;;AAEDoB,EAAAA,YAAY,CAACC,IAAD,EAAO;AACjB,UAAMC,UAAU,GAAGD,IAAI,CAACE,IAAL,KAAc,YAAd,IAA8BF,IAAI,CAACE,IAAL,KAAc,WAA/D;;AACA,QAAI,CAACD,UAAL,EAAiB;AACf,eAAQE,KAAR,CAAc,mCAAd;AACD;;AACD,UAAMC,MAAM,GAAGJ,IAAI,CAACK,IAAL,GAAY,IAAZ,GAAmB,IAAnB,GAA0B,CAAzC;;AACA,QAAI,CAACD,MAAL,EAAa;AACX,eAAQD,KAAR,CAAc,8BAAd;AACD;;AACD,WAAOF,UAAU,IAAIG,MAArB;AACD;;AAEDE,EAAAA,cAAc,CAACC,QAAD,EAAW;AACvB,WAAOA,QAAQ,CAACC,IAAT,GAAgBC,IAAhB,CAAqBD,IAAI,IAAI;AAClC,YAAME,IAAI,GAAGF,IAAI,IAAIlB,IAAI,CAACC,KAAL,CAAWiB,IAAX,CAArB;;AACA,UAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AAChB,eAAOD,IAAP;AACD;;AACD,aAAOA,IAAP;AACD,KANM,CAAP;AAOD;;AAEDtB,EAAAA,YAAY,CAACwB,IAAD,EAAO;AACjB,QAAIA,IAAI,CAACZ,IAAL,CAAUa,MAAV,KAAqB,WAAzB,EAAsC;AACpC,WAAKnB,QAAL,CAAc;AAAEhB,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA;AACD;;AACD,QAAIkC,IAAI,CAACZ,IAAL,CAAUa,MAAV,KAAqB,MAAzB,EAAiC;AAC/B;AACA,WAAKC,SAAL,CAAeF,IAAI,CAACZ,IAAL,CAAUe,aAAzB,EAAwCjC,OAAO,IAC7C,KAAKY,QAAL,CAAc;AACZZ,QAAAA,OADY;AAEZJ,QAAAA,OAAO,EAAE;AAFG,OAAd,CADF;AAMD;AACF;;AAEDoC,EAAAA,SAAS,CAACE,GAAD,EAAMC,QAAN,EAAgB;AACvB,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAAgC,MAAMH,QAAQ,CAACC,MAAM,CAACG,MAAR,CAA9C;AACAH,IAAAA,MAAM,CAACI,aAAP,CAAqBN,GAArB;AACD;;AAED,QAAM7B,QAAN,CAAeQ,CAAf,EAAkB;AAChBA,IAAAA,CAAC,CAAC4B,cAAF;AACA,SAAK7B,QAAL,CAAc;AAAEhB,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,SAAKH,KAAL,CAAWiD,IAAX;AACA,UAAMC,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAAS,KAAKpD,KAAL,CAAWC,KAAM;AAFnC,OAFY;AAMrBoD,MAAAA,IAAI,EAAEvC,IAAI,CAACwC,SAAL,CAAe;AACnBlD,QAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWI,IADE;AAEnBC,QAAAA,KAAK,EAAE,KAAKL,KAAL,CAAWK,KAFC;AAGnBG,QAAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWQ,QAHF;AAInBD,QAAAA,OAAO,EAAE,KAAKP,KAAL,CAAWO,OAJD;AAKnBJ,QAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG,IALE;AAMnBG,QAAAA,OAAO,EAAE,KAAKN,KAAL,CAAWM,OAAX,GAAqB,KAAKN,KAAL,CAAWM,OAAhC,GAA0CiD;AANhC,OAAf;AANe,KAAvB;;AAeA,QAAI;AACF,YAAMxB,QAAQ,GAAG,MAAMyB,KAAK,CAC1B,yFAD0B,EAE1BP,cAF0B,CAA5B;AAKA,UAAIf,IAAI,GAAG,MAAM,KAAKJ,cAAL,CAAoBC,QAApB,CAAjB;AACA,UAAIG,IAAI,CAACuB,OAAT,EAAkB,SAAQC,OAAR,CAAgB,8BAAhB,EAAlB,KACK,SAAQ/B,KAAR,CAAcO,IAAd;AAEL,WAAKhB,QAAL,CAAc;AAAEhB,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,WAAKH,KAAL,CAAW4D,MAAX;AACA,WAAK5D,KAAL,CAAW6D,YAAX;AACD,KAbD,CAaE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAMC,YAAY,GAAG,KAAKlE,KAAL,CAAWkE,YAAhC;AACA,UAAMC,cAAc,GAAG;AACrBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADI;AAERC,QAAAA,EAAE,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFI,OADW;AAKrBE,MAAAA,UAAU,EAAE;AACVH,QAAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADM;AAEVC,QAAAA,EAAE,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFM;AALS,KAAvB;AAUA,UAAMG,YAAY,GAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,IAAI,EAAE,KAAKxE,KAAL,CAAWE,OAAX,GAAqB,SAArB,GAAiC,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF;AAOA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,6CAAUgE,cAAV;AAA0B,MAAA,QAAQ,EAAE,KAAKO,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE;AACE,MAAA,KAAK,EAAC,oBADR;AAEE,MAAA,OAAO,EAAER,YAFX;AAGE,MAAA,IAAI,EAAE,MAAM,KAAKtD,QAAL,EAHd;AAIE,MAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAW6D,YAJvB;AAKE,MAAA,MAAM,EAAE,CACN;AAAQ,QAAA,OAAO,EAAE,KAAK7D,KAAL,CAAW6D,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADM,EAEN;AACE,QAAA,GAAG,EAAC,QADN;AAEE,QAAA,OAAO,EAAE,KAAK5D,KAAL,CAAWE,OAFtB;AAGE,QAAA,IAAI,EAAC,SAHP;AAIE,QAAA,OAAO,EAAE,KAAKS,QAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFM,CALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAiBE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,QAAQ,EAAC,cAFX;AAGE,MAAA,SAAS,EAAC,oDAHZ;AAIE,MAAA,cAAc,EAAE,KAJlB;AAKE,MAAA,MAAM,EAAC,kDALT;AAME,MAAA,YAAY,EAAE,KAAKY,YANrB;AAOE,MAAA,QAAQ,EAAE,KAAKX,YAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASG,KAAKZ,KAAL,CAAWM,OAAX,GACC;AACE,MAAA,GAAG,EAAE,KAAKN,KAAL,CAAWM,OADlB;AAEE,MAAA,GAAG,EAAC,QAFN;AAGE,MAAA,KAAK,EAAE;AAAEoE,QAAAA,KAAK,EAAE;AAAT,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAOCF,YAhBJ,CAjBF,EAoCE,0BAAM,IAAN;AAAW,MAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,QAAQ,MAFV;AAGE,MAAA,WAAW,EAAC,gBAHd;AAIE,MAAA,QAAQ,EAAE,KAAK/D,eAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CApCF,EA4CE,0BAAM,IAAN;AAAW,MAAA,KAAK,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,QAAQ,MAFV;AAGE,MAAA,WAAW,EAAC,eAHd;AAIE,MAAA,QAAQ,EAAE,KAAKA,eAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA5CF,EAoDE,0BAAM,IAAN;AAAW,MAAA,KAAK,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,2BAAO,QAAP;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,WAAW,EAAC,uBAFd;AAGE,MAAA,QAAQ,EAAE,KAAKA,eAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CApDF,EA2DE,0BAAM,IAAN;AAAW,MAAA,KAAK,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,SADP;AAEE,MAAA,QAAQ,MAFV;AAGE,MAAA,WAAW,EAAC,0BAHd;AAIE,MAAA,QAAQ,EAAE,KAAKA,eAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA3DF,EAmEE,0BAAM,IAAN;AAAW,MAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,KAAK,EAAE,KAAKT,KAAL,CAAWG,IADpB;AAEE,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAW8B,IAFnB;AAGE,MAAA,KAAK,EAAE;AAAE6C,QAAAA,KAAK,EAAE;AAAT,OAHT;AAIE,MAAA,QAAQ,EAAErD,KAAK,IAAI,KAAKC,YAAL,CAAkBD,KAAlB,CAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANF,EAOE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,CADF,CAnEF,CADF,CADF,CADF;AAqFD;;AAzN8B;;AA4NjC,eAAexB,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport {\n  message,\n  Upload,\n  Button,\n  Modal,\n  Form,\n  Input,\n  Select,\n  Icon\n} from 'antd';\n\nconst { Option } = Select;\nmessage.config({\n  top: 70\n});\n\nclass AddModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: null,\n      loading: false,\n      role: 'admin',\n      name: '',\n      email: '',\n      picture: null,\n      address: '',\n      password: ''\n    };\n\n    this.onChangeHandler = this.onChangeHandler.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.handleUpload = this.handleUpload.bind(this);\n  }\n\n  componentDidMount() {\n    const token = JSON.parse(localStorage.getItem('token'));\n    if (token) this.setState({ token });\n  }\n\n  onChangeHandler(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  onRoleChange(role) {\n    this.setState({ role });\n  }\n\n  beforeUpload(file) {\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n    if (!isJpgOrPng) {\n      message.error('You can only upload JPG/PNG file!');\n    }\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n      message.error('Image must smaller than 2MB!');\n    }\n    return isJpgOrPng && isLt2M;\n  }\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n      if (!response.ok) {\n        return data;\n      }\n      return data;\n    });\n  }\n\n  handleUpload(info) {\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      this.getBase64(info.file.originFileObj, picture =>\n        this.setState({\n          picture,\n          loading: false\n        })\n      );\n    }\n  }\n\n  getBase64(img, callback) {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => callback(reader.result));\n    reader.readAsDataURL(img);\n  }\n\n  async onSubmit(e) {\n    e.preventDefault();\n    this.setState({ loading: true });\n    this.props.load();\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.state.token}`\n      },\n      body: JSON.stringify({\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password,\n        address: this.state.address,\n        role: this.state.role,\n        picture: this.state.picture ? this.state.picture : undefined\n      })\n    };\n    try {\n      const response = await fetch(\n        'https://cors-anywhere.herokuapp.com/https://admin-api-tutor.herokuapp.com/user/register',\n        requestOptions\n      );\n\n      let data = await this.handleResponse(response);\n      if (data.newUser) message.success('Account created successfully');\n      else message.error(data);\n\n      this.setState({ loading: false });\n      this.props.loaded();\n      this.props.handleCancel();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const modalVisible = this.props.modalVisible;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 18 },\n        sm: { span: 5 }\n      },\n      wrapperCol: {\n        xs: { span: 28 },\n        sm: { span: 17 }\n      }\n    };\n    const uploadButton = (\n      <div>\n        <Icon type={this.state.loading ? 'loading' : 'plus'} />\n        <div className=\"ant-upload-text\">Upload</div>\n      </div>\n    );\n\n    return (\n      <div>\n        <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n          <Modal\n            title=\"Create New Account\"\n            visible={modalVisible}\n            onOk={() => this.onSubmit()}\n            onCancel={this.props.handleCancel}\n            footer={[\n              <Button onClick={this.props.handleCancel}>Cancel</Button>,\n              <Button\n                key=\"Submit\"\n                loading={this.state.loading}\n                type=\"primary\"\n                onClick={this.onSubmit}\n              >\n                Submit\n              </Button>\n            ]}\n          >\n            <Upload\n              name=\"avatar\"\n              listType=\"picture-card\"\n              className=\"avatar-uploader d-flex justify-content-center mb-2\"\n              showUploadList={false}\n              action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n              beforeUpload={this.beforeUpload}\n              onChange={this.handleUpload}\n            >\n              {this.state.picture ? (\n                <img\n                  src={this.state.picture}\n                  alt=\"avatar\"\n                  style={{ width: '100%' }}\n                />\n              ) : (\n                uploadButton\n              )}\n            </Upload>\n            <Form.Item label=\"Name\">\n              <Input\n                name=\"name\"\n                required\n                placeholder=\"your full name\"\n                onChange={this.onChangeHandler}\n              />\n            </Form.Item>\n            <Form.Item label=\"E-mail\">\n              <Input\n                name=\"email\"\n                required\n                placeholder=\"example@email\"\n                onChange={this.onChangeHandler}\n              />\n            </Form.Item>\n            <Form.Item label=\"Password\">\n              <Input.Password\n                name=\"password\"\n                placeholder=\"at least 6 characters\"\n                onChange={this.onChangeHandler}\n              />\n            </Form.Item>\n            <Form.Item label=\"Address\">\n              <Input\n                name=\"address\"\n                required\n                placeholder=\"Eg: 123 Street, Ward,...\"\n                onChange={this.onChangeHandler}\n              />\n            </Form.Item>\n            <Form.Item label=\"Role\">\n              <Select\n                value={this.state.role}\n                size={this.props.size}\n                style={{ width: '32%' }}\n                onChange={value => this.onRoleChange(value)}\n              >\n                <Option value=\"admin\">Admin</Option>\n                <Option value=\"master\">Master</Option>\n              </Select>\n            </Form.Item>\n          </Modal>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default AddModal;\n"]},"metadata":{},"sourceType":"module"}