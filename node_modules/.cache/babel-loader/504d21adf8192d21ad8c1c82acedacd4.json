{"ast":null,"code":"import _objectSpread from \"/Users/trongledo/Documents/GitHub/tutor-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/trongledo/Documents/GitHub/tutor-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/trongledo/Documents/GitHub/tutor-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/trongledo/Documents/GitHub/tutor-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/trongledo/Documents/GitHub/tutor-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/trongledo/Documents/GitHub/tutor-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/trongledo/Documents/GitHub/tutor-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/trongledo/Documents/GitHub/tutor-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/trongledo/Documents/GitHub/tutor-admin/src/views/Users/Users.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MDBDataTable } from \"mdbreact\";\nimport { Badge, Card, CardBody, CardHeader, Col, Row } from \"reactstrap\";\nimport LoadingOverlay from \"react-loading-overlay\";\n\nvar Users =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Users, _Component);\n\n  function Users(props) {\n    var _this;\n\n    _classCallCheck(this, Users);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Users).call(this, props));\n\n    _this.getBadge = function (status) {\n      return status === \"active\" ? \"success\" : status === \"inactive\" ? \"secondary\" : status === \"pending\" ? \"warning\" : status === \"banned\" ? \"danger\" : \"primary\";\n    };\n\n    _this.getUsers =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var requestOptions, response, userData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              requestOptions = {\n                method: \"GET\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  Authorization: \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI1ZGU1ZTE1YjJkMDY1NjFkNDc2MjA0MmUiLCJyb2xlIjoibWFzdGVyIiwiaWF0IjoxNTc1ODgyNjc1fQ.gRjIyKO6wb0N5QVa5kHuXsWTF7c_GUmNsVkagvNsk2U\"\n                }\n              };\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(\"https://cors-anywhere.herokuapp.com/https://admin-api-tutor.herokuapp.com/me/users\", requestOptions);\n\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return _this.handleResponse(response);\n\n            case 7:\n              userData = _context.sent;\n              userData.forEach(function (element, index) {\n                var userLink = \"/users/\".concat(element._id); // element.name = <Link to={userLink}>{element.name}</Link>;\n                // element.email = <Link to={userLink}>{element.email}</Link>;\n\n                var date = new Date(element.date);\n                element._id = index + 1;\n                element.status = React.createElement(Link, {\n                  to: userLink,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 100\n                  },\n                  __self: this\n                }, React.createElement(Badge, {\n                  color: _this.getBadge(element.status),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 101\n                  },\n                  __self: this\n                }, element.status));\n                element.date = date.toLocaleString();\n                element.actions = React.createElement(\"div\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 108\n                  },\n                  __self: this\n                }, React.createElement(Link, {\n                  className: \"btn btn-info\",\n                  to: userLink,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 109\n                  },\n                  __self: this\n                }, \"View\"));\n              });\n\n              _this.setState({\n                loading: false,\n                userData: userData\n              });\n\n              return _context.abrupt(\"return\", userData);\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", _context.t0);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13]]);\n    }));\n    _this.state = {\n      loading: true,\n      userData: [],\n      columns: [{\n        label: \"ID\",\n        field: \"_id\",\n        sort: \"asc\",\n        width: 50\n      }, {\n        label: \"Name\",\n        field: \"name\",\n        sort: \"asc\",\n        width: 150\n      }, {\n        label: \"Email\",\n        field: \"email\",\n        sort: \"asc\",\n        width: 150\n      }, {\n        label: \"Registered\",\n        field: \"date\",\n        sort: \"asc\",\n        width: 100\n      }, {\n        label: \"Role\",\n        field: \"role\",\n        sort: \"asc\",\n        width: 100\n      }, {\n        label: \"Status\",\n        field: \"status\",\n        sort: \"asc\",\n        width: 100\n      }, {\n        label: \"Actions\",\n        field: \"actions\",\n        sort: \"asc\",\n        width: 150\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(Users, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getUsers();\n    }\n  }, {\n    key: \"handleResponse\",\n    value: function handleResponse(response) {\n      return response.text().then(function (text) {\n        var data = text && JSON.parse(text);\n\n        if (!response.ok) {\n          if (response.status === 401) {} // auto logout if 401 response returned from api\n          // logoutUser();\n          // const error = (data && data.message) || response.statusText;\n          // return Promise.reject(error);\n\n\n          return data;\n        }\n\n        return data;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(LoadingOverlay, {\n        active: this.state.loading,\n        spinner: true,\n        text: \"Loading...\",\n        styles: {\n          overlay: function overlay(base) {\n            return _objectSpread({}, base, {\n              background: \"rgba(255, 255, 255, 0.5)\",\n              color: \"black\"\n            });\n          },\n          spinner: function spinner(base) {\n            return _objectSpread({}, base, {\n              width: \"100px\",\n              \"& svg circle\": {\n                stroke: \"rgba(255, 0, 0, 0.5)\"\n              }\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xl: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        className: \"bg-dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-align-justify\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), \"Users\", \"  \", React.createElement(\"small\", {\n        className: \"text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"user database\")), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(MDBDataTable, {\n        responsive: true,\n        hover: true,\n        bordered: true,\n        data: {\n          columns: this.state.columns,\n          rows: this.state.userData\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return Users;\n}(Component);\n\nexport default Users;\n/* <Row>\n            <Col xl={12}>\n              <Card>\n                <CardHeader>\n                  <i className=\"fa fa-align-justify\"></i> Users{\" \"}\n                  <small className=\"text-muted\">user database</small>\n                </CardHeader>\n                <CardBody>\n                  <Table responsive hover bordered>\n                    <thead>\n                      <tr>\n                        <th scope=\"col\">ID</th>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">Registered</th>\n                        <th scope=\"col\">Role</th>\n                        <th scope=\"col\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.userData.map((user, index) => (\n                        <UserRow key={index} index={index} user={user} />\n                      ))}\n                    </tbody>\n                  </Table>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row> */","map":{"version":3,"sources":["/Users/trongledo/Documents/GitHub/tutor-admin/src/views/Users/Users.js"],"names":["React","Component","Link","MDBDataTable","Badge","Card","CardBody","CardHeader","Col","Row","LoadingOverlay","Users","props","getBadge","status","getUsers","requestOptions","method","headers","Authorization","fetch","response","handleResponse","userData","forEach","element","index","userLink","_id","date","Date","toLocaleString","actions","setState","loading","state","columns","label","field","sort","width","text","then","data","JSON","parse","ok","overlay","base","background","color","spinner","stroke","rows"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MDBDataTable } from \"mdbreact\";\nimport { Badge, Card, CardBody, CardHeader, Col, Row } from \"reactstrap\";\nimport LoadingOverlay from \"react-loading-overlay\";\n\nclass Users extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      userData: [],\n      columns: [\n        {\n          label: \"ID\",\n          field: \"_id\",\n          sort: \"asc\",\n          width: 50\n        },\n        {\n          label: \"Name\",\n          field: \"name\",\n          sort: \"asc\",\n          width: 150\n        },\n        {\n          label: \"Email\",\n          field: \"email\",\n          sort: \"asc\",\n          width: 150\n        },\n        {\n          label: \"Registered\",\n          field: \"date\",\n          sort: \"asc\",\n          width: 100\n        },\n        {\n          label: \"Role\",\n          field: \"role\",\n          sort: \"asc\",\n          width: 100\n        },\n        {\n          label: \"Status\",\n          field: \"status\",\n          sort: \"asc\",\n          width: 100\n        },\n        {\n          label: \"Actions\",\n          field: \"actions\",\n          sort: \"asc\",\n          width: 150\n        }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  getBadge = status => {\n    return status === \"active\"\n      ? \"success\"\n      : status === \"inactive\"\n      ? \"secondary\"\n      : status === \"pending\"\n      ? \"warning\"\n      : status === \"banned\"\n      ? \"danger\"\n      : \"primary\";\n  };\n\n  getUsers = async () => {\n    const requestOptions = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI1ZGU1ZTE1YjJkMDY1NjFkNDc2MjA0MmUiLCJyb2xlIjoibWFzdGVyIiwiaWF0IjoxNTc1ODgyNjc1fQ.gRjIyKO6wb0N5QVa5kHuXsWTF7c_GUmNsVkagvNsk2U`\n      }\n    };\n    try {\n      const response = await fetch(\n        \"https://cors-anywhere.herokuapp.com/https://admin-api-tutor.herokuapp.com/me/users\",\n        requestOptions\n      );\n\n      let userData = await this.handleResponse(response);\n\n      userData.forEach((element, index) => {\n        const userLink = `/users/${element._id}`;\n        // element.name = <Link to={userLink}>{element.name}</Link>;\n        // element.email = <Link to={userLink}>{element.email}</Link>;\n        let date = new Date(element.date);\n\n        element._id = index + 1;\n        element.status = (\n          <Link to={userLink}>\n            <Badge color={this.getBadge(element.status)}>\n              {element.status}\n            </Badge>\n          </Link>\n        );\n        element.date = date.toLocaleString();\n        element.actions = (\n          <div>\n            <Link className=\"btn btn-info\" to={userLink}>\n              View\n            </Link>\n          </div>\n        );\n      });\n\n      this.setState({ loading: false, userData: userData });\n      return userData;\n    } catch (err) {\n      return err;\n    }\n  };\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n      if (!response.ok) {\n        if (response.status === 401) {\n          // auto logout if 401 response returned from api\n          // logoutUser();\n        }\n\n        // const error = (data && data.message) || response.statusText;\n        // return Promise.reject(error);\n        return data;\n      }\n      return data;\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"animated fadeIn\">\n        <LoadingOverlay\n          active={this.state.loading}\n          spinner\n          text=\"Loading...\"\n          styles={{\n            overlay: base => ({\n              ...base,\n              background: \"rgba(255, 255, 255, 0.5)\",\n              color: \"black\"\n            }),\n            spinner: base => ({\n              ...base,\n              width: \"100px\",\n              \"& svg circle\": {\n                stroke: \"rgba(255, 0, 0, 0.5)\"\n              }\n            })\n          }}\n        >\n          <Row>\n            <Col xl={12}>\n              <Card>\n                <CardHeader className=\"bg-dark\">\n                  <i className=\"fa fa-align-justify\"></i>Users{\"  \"}\n                  <small className=\"text-muted\">user database</small>\n                </CardHeader>\n                <CardBody>\n                  <MDBDataTable\n                    responsive\n                    hover\n                    bordered\n                    data={{\n                      columns: this.state.columns,\n                      rows: this.state.userData\n                    }}\n                  />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </LoadingOverlay>\n      </div>\n    );\n  }\n}\n\nexport default Users;\n\n/* <Row>\n            <Col xl={12}>\n              <Card>\n                <CardHeader>\n                  <i className=\"fa fa-align-justify\"></i> Users{\" \"}\n                  <small className=\"text-muted\">user database</small>\n                </CardHeader>\n                <CardBody>\n                  <Table responsive hover bordered>\n                    <thead>\n                      <tr>\n                        <th scope=\"col\">ID</th>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">Registered</th>\n                        <th scope=\"col\">Role</th>\n                        <th scope=\"col\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.userData.map((user, index) => (\n                        <UserRow key={index} index={index} user={user} />\n                      ))}\n                    </tbody>\n                  </Table>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row> */\n"]},"metadata":{},"sourceType":"module"}