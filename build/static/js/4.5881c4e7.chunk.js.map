{"version":3,"sources":["../tag/CheckableTag.jsx","../tag/index.jsx","../badge/style/index.jsx","../badge/ScrollNumber.jsx","../badge/index.jsx","../node_modules/reactstrap/es/Row.js","../descriptions/style/index.jsx","../descriptions/Col.jsx","../descriptions/index.jsx","../tag/style/index.jsx"],"names":["__rest","s","e","t","Object","i","p","CheckableTag","checked","onChange","getPrefixCls","_a","customizePrefixCls","className","restProps","prefixCls","cls","classNames","onClick","handleClick","this","React","PresetColorRegex","RegExp","PresetColorTypes","Tag","visible","children","otherProps","isNeedWave","tagProps","omit","style","warning","nextProps","color","isPresetColor","backgroundColor","undefined","onClose","afterClose","type","handleIconClick","closable","polyfill","getNumberArray","num","current","Number","isNaN","ScrollNumber","onAnimated","title","component","displayComponent","newProps","boxShadow","animateStarted","count","props","nextState","_","prevState","currentCount","Math","lastCount","currentDigit","state","lastDigit","position","getPositionByNum","removeTransition","transition","msTransform","WebkitTransform","transform","key","childrenToReturn","currentClassName","renderNumberList","Badge","customizeScrollNumberPrefixCls","status","text","omitArr","scrollNumberPrefixCls","scrollNumber","statusText","statusCls","statusStyle","styleWithOffset","statusTextColor","showProp","transitionName","transitionAppear","overflowCount","offset","right","parseInt","marginTop","numberedDispayCount","dot","isZero","showZero","displayCount","isDot","hidden","customNode","scrollNumberCls","data-show","PropTypes","rowColsPropType","oneOfType","number","string","propTypes","tag","tagPropType","noGutters","bool","cssModule","object","form","xs","sm","md","lg","xl","defaultProps","widths","Row","attributes","_objectWithoutPropertiesLoose","colClasses","forEach","colWidth","colSize","isXs","push","classes","mapToCssModules","createElement","_extends","child","bordered","colon","layout","label","span","labelProps","colSpan","flattenChildren","toArray","flatChildren","defaultColumnMap","xxl","Descriptions","screens","column","ResponsiveObserve","responsiveArray","breakpoint","size","childrenArray","rows","columns","itemNodes","itemNode","leftSpans","lastSpanSame","index","generateChildrenRows","renderCol","colItem","idx","cloneChildren","cloneContentChildren","childrenItem","renderRow"],"mappings":"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","file":"static/js/4.5881c4e7.chunk.js","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\nexport default class CheckableTag extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleClick = () => {\n            const { checked, onChange } = this.props;\n            if (onChange) {\n                onChange(!checked);\n            }\n        };\n        this.renderCheckableTag = ({ getPrefixCls }) => {\n            const _a = this.props, { prefixCls: customizePrefixCls, className, checked } = _a, restProps = __rest(_a, [\"prefixCls\", \"className\", \"checked\"]);\n            const prefixCls = getPrefixCls('tag', customizePrefixCls);\n            const cls = classNames(prefixCls, {\n                [`${prefixCls}-checkable`]: true,\n                [`${prefixCls}-checkable-checked`]: checked,\n            }, className);\n            delete restProps.onChange; // TypeScript cannot check delete now.\n            return <span {...restProps} className={cls} onClick={this.handleClick}/>;\n        };\n    }\n    render() {\n        return <ConfigConsumer>{this.renderCheckableTag}</ConfigConsumer>;\n    }\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { polyfill } from 'react-lifecycles-compat';\nimport Icon from '../icon';\nimport CheckableTag from './CheckableTag';\nimport { ConfigConsumer } from '../config-provider';\nimport { PresetColorTypes } from '../_util/colors';\nimport warning from '../_util/warning';\nimport Wave from '../_util/wave';\nconst PresetColorRegex = new RegExp(`^(${PresetColorTypes.join('|')})(-inverse)?$`);\nclass Tag extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: true,\n        };\n        this.handleIconClick = (e) => {\n            this.setVisible(false, e);\n        };\n        this.renderTag = (configProps) => {\n            const _a = this.props, { children } = _a, otherProps = __rest(_a, [\"children\"]);\n            const isNeedWave = 'onClick' in otherProps || (children && children.type === 'a');\n            const tagProps = omit(otherProps, [\n                'onClose',\n                'afterClose',\n                'color',\n                'visible',\n                'closable',\n                'prefixCls',\n            ]);\n            return isNeedWave ? (<Wave>\n        <span {...tagProps} className={this.getTagClassName(configProps)} style={this.getTagStyle()}>\n          {children}\n          {this.renderCloseIcon()}\n        </span>\n      </Wave>) : (<span {...tagProps} className={this.getTagClassName(configProps)} style={this.getTagStyle()}>\n        {children}\n        {this.renderCloseIcon()}\n      </span>);\n        };\n        warning(!('afterClose' in props), 'Tag', \"'afterClose' will be deprecated, please use 'onClose', we will remove this in the next version.\");\n    }\n    static getDerivedStateFromProps(nextProps) {\n        if ('visible' in nextProps) {\n            return {\n                visible: nextProps.visible,\n            };\n        }\n        return null;\n    }\n    getTagStyle() {\n        const { color, style } = this.props;\n        const isPresetColor = this.isPresetColor();\n        return Object.assign({ backgroundColor: color && !isPresetColor ? color : undefined }, style);\n    }\n    getTagClassName({ getPrefixCls }) {\n        const { prefixCls: customizePrefixCls, className, color } = this.props;\n        const { visible } = this.state;\n        const isPresetColor = this.isPresetColor();\n        const prefixCls = getPrefixCls('tag', customizePrefixCls);\n        return classNames(prefixCls, {\n            [`${prefixCls}-${color}`]: isPresetColor,\n            [`${prefixCls}-has-color`]: color && !isPresetColor,\n            [`${prefixCls}-hidden`]: !visible,\n        }, className);\n    }\n    setVisible(visible, e) {\n        const { onClose, afterClose } = this.props;\n        if (onClose) {\n            onClose(e);\n        }\n        if (afterClose && !onClose) {\n            // next version remove.\n            afterClose();\n        }\n        if (e.defaultPrevented) {\n            return;\n        }\n        if (!('visible' in this.props)) {\n            this.setState({ visible });\n        }\n    }\n    isPresetColor() {\n        const { color } = this.props;\n        if (!color) {\n            return false;\n        }\n        return PresetColorRegex.test(color);\n    }\n    renderCloseIcon() {\n        const { closable } = this.props;\n        return closable ? <Icon type=\"close\" onClick={this.handleIconClick}/> : null;\n    }\n    render() {\n        return <ConfigConsumer>{this.renderTag}</ConfigConsumer>;\n    }\n}\nTag.CheckableTag = CheckableTag;\nTag.defaultProps = {\n    closable: false,\n};\npolyfill(Tag);\nexport default Tag;\n","import '../../style/index.less';\nimport './index.less';\n","import * as React from 'react';\nimport omit from 'omit.js';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { ConfigConsumer } from '../config-provider';\nfunction getNumberArray(num) {\n    return num\n        ? num\n            .toString()\n            .split('')\n            .reverse()\n            .map(i => {\n            const current = Number(i);\n            return isNaN(current) ? i : current;\n        })\n        : [];\n}\nfunction renderNumberList(position) {\n    const childrenToReturn = [];\n    for (let i = 0; i < 30; i++) {\n        const currentClassName = position === i ? 'current' : '';\n        childrenToReturn.push(<p key={i.toString()} className={currentClassName}>\n        {i % 10}\n      </p>);\n    }\n    return childrenToReturn;\n}\nclass ScrollNumber extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onAnimated = () => {\n            const { onAnimated } = this.props;\n            if (onAnimated) {\n                onAnimated();\n            }\n        };\n        this.renderScrollNumber = ({ getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls, className, style, title, component = 'sup', displayComponent, } = this.props;\n            // fix https://fb.me/react-unknown-prop\n            const restProps = omit(this.props, [\n                'count',\n                'onAnimated',\n                'component',\n                'prefixCls',\n                'displayComponent',\n            ]);\n            const prefixCls = getPrefixCls('scroll-number', customizePrefixCls);\n            const newProps = Object.assign(Object.assign({}, restProps), { className: classNames(prefixCls, className), title: title });\n            // allow specify the border\n            // mock border-color by box-shadow for compatible with old usage:\n            // <Badge count={4} style={{ backgroundColor: '#fff', color: '#999', borderColor: '#d9d9d9' }} />\n            if (style && style.borderColor) {\n                newProps.style = Object.assign(Object.assign({}, style), { boxShadow: `0 0 0 1px ${style.borderColor} inset` });\n            }\n            if (displayComponent) {\n                return React.cloneElement(displayComponent, {\n                    className: classNames(`${prefixCls}-custom-component`, displayComponent.props && displayComponent.props.className),\n                });\n            }\n            return React.createElement(component, newProps, this.renderNumberElement(prefixCls));\n        };\n        this.state = {\n            animateStarted: true,\n            count: props.count,\n        };\n    }\n    static getDerivedStateFromProps(nextProps, nextState) {\n        if ('count' in nextProps) {\n            if (nextState.count === nextProps.count) {\n                return null;\n            }\n            return {\n                animateStarted: true,\n            };\n        }\n        return null;\n    }\n    componentDidUpdate(_, prevState) {\n        this.lastCount = prevState.count;\n        const { animateStarted } = this.state;\n        if (animateStarted) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState((__, props) => ({\n                animateStarted: false,\n                count: props.count,\n            }), this.onAnimated);\n        }\n    }\n    getPositionByNum(num, i) {\n        const { count } = this.state;\n        const currentCount = Math.abs(Number(count));\n        const lastCount = Math.abs(Number(this.lastCount));\n        const currentDigit = Math.abs(getNumberArray(this.state.count)[i]);\n        const lastDigit = Math.abs(getNumberArray(this.lastCount)[i]);\n        if (this.state.animateStarted) {\n            return 10 + num;\n        }\n        // 同方向则在同一侧切换数字\n        if (currentCount > lastCount) {\n            if (currentDigit >= lastDigit) {\n                return 10 + num;\n            }\n            return 20 + num;\n        }\n        if (currentDigit <= lastDigit) {\n            return 10 + num;\n        }\n        return num;\n    }\n    renderCurrentNumber(prefixCls, num, i) {\n        if (typeof num === 'number') {\n            const position = this.getPositionByNum(num, i);\n            const removeTransition = this.state.animateStarted || getNumberArray(this.lastCount)[i] === undefined;\n            return React.createElement('span', {\n                className: `${prefixCls}-only`,\n                style: {\n                    transition: removeTransition ? 'none' : undefined,\n                    msTransform: `translateY(${-position * 100}%)`,\n                    WebkitTransform: `translateY(${-position * 100}%)`,\n                    transform: `translateY(${-position * 100}%)`,\n                },\n                key: i,\n            }, renderNumberList(position));\n        }\n        return (<span key=\"symbol\" className={`${prefixCls}-symbol`}>\n        {num}\n      </span>);\n    }\n    renderNumberElement(prefixCls) {\n        const { count } = this.state;\n        if (count && Number(count) % 1 === 0) {\n            return getNumberArray(count)\n                .map((num, i) => this.renderCurrentNumber(prefixCls, num, i))\n                .reverse();\n        }\n        return count;\n    }\n    render() {\n        return <ConfigConsumer>{this.renderScrollNumber}</ConfigConsumer>;\n    }\n}\nScrollNumber.defaultProps = {\n    count: null,\n    onAnimated() { },\n};\npolyfill(ScrollNumber);\nexport default ScrollNumber;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport Animate from 'rc-animate';\nimport omit from 'omit.js';\nimport classNames from 'classnames';\nimport ScrollNumber from './ScrollNumber';\nimport { PresetColorTypes } from '../_util/colors';\nimport { ConfigConsumer } from '../config-provider';\nfunction isPresetColor(color) {\n    return PresetColorTypes.indexOf(color) !== -1;\n}\nexport default class Badge extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderBadge = ({ getPrefixCls }) => {\n            const _a = this.props, { prefixCls: customizePrefixCls, scrollNumberPrefixCls: customizeScrollNumberPrefixCls, children, status, text, color } = _a, restProps = __rest(_a, [\"prefixCls\", \"scrollNumberPrefixCls\", \"children\", \"status\", \"text\", \"color\"]);\n            const omitArr = [\n                'count',\n                'showZero',\n                'overflowCount',\n                'className',\n                'style',\n                'dot',\n                'offset',\n                'title',\n            ];\n            const prefixCls = getPrefixCls('badge', customizePrefixCls);\n            const scrollNumberPrefixCls = getPrefixCls('scroll-number', customizeScrollNumberPrefixCls);\n            const scrollNumber = this.renderBadgeNumber(prefixCls, scrollNumberPrefixCls);\n            const statusText = this.renderStatusText(prefixCls);\n            const statusCls = classNames({\n                [`${prefixCls}-status-dot`]: this.hasStatus(),\n                [`${prefixCls}-status-${status}`]: !!status,\n                [`${prefixCls}-status-${color}`]: isPresetColor(color),\n            });\n            const statusStyle = {};\n            if (color && !isPresetColor(color)) {\n                statusStyle.background = color;\n            }\n            // <Badge status=\"success\" />\n            if (!children && this.hasStatus()) {\n                const styleWithOffset = this.getStyleWithOffset();\n                const statusTextColor = styleWithOffset && styleWithOffset.color;\n                return (<span {...omit(restProps, omitArr)} className={this.getBadgeClassName(prefixCls)} style={styleWithOffset}>\n          <span className={statusCls} style={statusStyle}/>\n          <span style={{ color: statusTextColor }} className={`${prefixCls}-status-text`}>\n            {text}\n          </span>\n        </span>);\n            }\n            return (<span {...omit(restProps, omitArr)} className={this.getBadgeClassName(prefixCls)}>\n        {children}\n        <Animate component=\"\" showProp=\"data-show\" transitionName={children ? `${prefixCls}-zoom` : ''} transitionAppear>\n          {scrollNumber}\n        </Animate>\n        {statusText}\n      </span>);\n        };\n    }\n    getNumberedDispayCount() {\n        const { count, overflowCount } = this.props;\n        const displayCount = count > overflowCount ? `${overflowCount}+` : count;\n        return displayCount;\n    }\n    getDispayCount() {\n        const isDot = this.isDot();\n        // dot mode don't need count\n        if (isDot) {\n            return '';\n        }\n        return this.getNumberedDispayCount();\n    }\n    getScrollNumberTitle() {\n        const { title, count } = this.props;\n        if (title) {\n            return title;\n        }\n        return typeof count === 'string' || typeof count === 'number' ? count : undefined;\n    }\n    getStyleWithOffset() {\n        const { offset, style } = this.props;\n        return offset\n            ? Object.assign({ right: -parseInt(offset[0], 10), marginTop: offset[1] }, style) : style;\n    }\n    getBadgeClassName(prefixCls) {\n        const { className, children } = this.props;\n        return classNames(className, prefixCls, {\n            [`${prefixCls}-status`]: this.hasStatus(),\n            [`${prefixCls}-not-a-wrapper`]: !children,\n        });\n    }\n    hasStatus() {\n        const { status, color } = this.props;\n        return !!status || !!color;\n    }\n    isZero() {\n        const numberedDispayCount = this.getNumberedDispayCount();\n        return numberedDispayCount === '0' || numberedDispayCount === 0;\n    }\n    isDot() {\n        const { dot } = this.props;\n        const isZero = this.isZero();\n        return (dot && !isZero) || this.hasStatus();\n    }\n    isHidden() {\n        const { showZero } = this.props;\n        const displayCount = this.getDispayCount();\n        const isZero = this.isZero();\n        const isDot = this.isDot();\n        const isEmpty = displayCount === null || displayCount === undefined || displayCount === '';\n        return (isEmpty || (isZero && !showZero)) && !isDot;\n    }\n    renderStatusText(prefixCls) {\n        const { text } = this.props;\n        const hidden = this.isHidden();\n        return hidden || !text ? null : <span className={`${prefixCls}-status-text`}>{text}</span>;\n    }\n    renderDispayComponent() {\n        const { count } = this.props;\n        const customNode = count;\n        if (!customNode || typeof customNode !== 'object') {\n            return undefined;\n        }\n        return React.cloneElement(customNode, {\n            style: Object.assign(Object.assign({}, this.getStyleWithOffset()), (customNode.props && customNode.props.style)),\n        });\n    }\n    renderBadgeNumber(prefixCls, scrollNumberPrefixCls) {\n        const { status, count } = this.props;\n        const displayCount = this.getDispayCount();\n        const isDot = this.isDot();\n        const hidden = this.isHidden();\n        const scrollNumberCls = classNames({\n            [`${prefixCls}-dot`]: isDot,\n            [`${prefixCls}-count`]: !isDot,\n            [`${prefixCls}-multiple-words`]: !isDot && count && count.toString && count.toString().length > 1,\n            [`${prefixCls}-status-${status}`]: this.hasStatus(),\n        });\n        return hidden ? null : (<ScrollNumber prefixCls={scrollNumberPrefixCls} data-show={!hidden} className={scrollNumberCls} count={displayCount} displayComponent={this.renderDispayComponent()} // <Badge status=\"success\" count={<Icon type=\"xxx\" />}></Badge>\n         title={this.getScrollNumberTitle()} style={this.getStyleWithOffset()} key=\"scrollNumber\"/>);\n    }\n    render() {\n        return <ConfigConsumer>{this.renderBadge}</ConfigConsumer>;\n    }\n}\nBadge.defaultProps = {\n    count: null,\n    showZero: false,\n    dot: false,\n    overflowCount: 99,\n};\nBadge.propTypes = {\n    count: PropTypes.node,\n    showZero: PropTypes.bool,\n    dot: PropTypes.bool,\n    overflowCount: PropTypes.number,\n};\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar rowColWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar rowColsPropType = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar propTypes = {\n  tag: tagPropType,\n  noGutters: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  form: PropTypes.bool,\n  xs: rowColsPropType,\n  sm: rowColsPropType,\n  md: rowColsPropType,\n  lg: rowColsPropType,\n  xl: rowColsPropType\n};\nvar defaultProps = {\n  tag: 'div',\n  widths: rowColWidths\n};\n\nvar Row = function Row(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      noGutters = props.noGutters,\n      Tag = props.tag,\n      form = props.form,\n      widths = props.widths,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"noGutters\", \"tag\", \"form\", \"widths\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var colSize = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!colSize) {\n      return;\n    }\n\n    var isXs = !i;\n    colClasses.push(isXs ? \"row-cols-\" + colSize : \"row-cols-\" + colWidth + \"-\" + colSize);\n  });\n  var classes = mapToCssModules(classNames(className, noGutters ? 'no-gutters' : null, form ? 'form-row' : 'row', colClasses), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nRow.propTypes = propTypes;\nRow.defaultProps = defaultProps;\nexport default Row;","import '../../style/index.less';\nimport './index.less';\n","import * as React from 'react';\nimport classNames from 'classnames';\nconst Col = props => {\n    const { child, bordered, colon, type, layout } = props;\n    const { prefixCls, label, className, children, span = 1 } = child.props;\n    const labelProps = {\n        className: classNames(`${prefixCls}-item-label`, {\n            [`${prefixCls}-item-colon`]: colon,\n            [`${prefixCls}-item-no-label`]: !label,\n        }),\n        key: 'label',\n    };\n    if (layout === 'vertical') {\n        labelProps.colSpan = span * 2 - 1;\n    }\n    if (bordered) {\n        if (type === 'label') {\n            return <th {...labelProps}>{label}</th>;\n        }\n        return (<td className={classNames(`${prefixCls}-item-content`, className)} key=\"content\" colSpan={span * 2 - 1}>\n        {children}\n      </td>);\n    }\n    if (layout === 'vertical') {\n        if (type === 'content') {\n            return (<td colSpan={span} className={classNames(`${prefixCls}-item`, className)}>\n          <span className={`${prefixCls}-item-content`} key=\"content\">\n            {children}\n          </span>\n        </td>);\n        }\n        return (<td colSpan={span} className={classNames(`${prefixCls}-item`, className)}>\n        <span className={classNames(`${prefixCls}-item-label`, { [`${prefixCls}-item-colon`]: colon })} key=\"label\">\n          {label}\n        </span>\n      </td>);\n    }\n    return (<td colSpan={span} className={classNames(`${prefixCls}-item`, className)}>\n      <span {...labelProps}>{label}</span>\n      <span className={`${prefixCls}-item-content`} key=\"content\">\n        {children}\n      </span>\n    </td>);\n};\nexport default Col;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport toArray from 'rc-util/lib/Children/toArray';\nimport warning from '../_util/warning';\nimport ResponsiveObserve, { responsiveArray, } from '../_util/responsiveObserve';\nimport { ConfigConsumer } from '../config-provider';\nimport Col from './Col';\n// https://github.com/smooth-code/react-flatten-children/\nfunction flattenChildren(children) {\n    if (!children) {\n        return [];\n    }\n    return toArray(children).reduce((flatChildren, child) => {\n        if (child && child.type === React.Fragment) {\n            return flatChildren.concat(flattenChildren(child.props.children));\n        }\n        flatChildren.push(child);\n        return flatChildren;\n    }, []);\n}\nconst DescriptionsItem = ({ children }) => children;\n/**\n * Convert children into `column` groups.\n * @param children: DescriptionsItem\n * @param column: number\n */\nconst generateChildrenRows = (children, column) => {\n    const rows = [];\n    let columns = null;\n    let leftSpans;\n    const itemNodes = flattenChildren(children);\n    itemNodes.forEach((node, index) => {\n        let itemNode = node;\n        if (!columns) {\n            leftSpans = column;\n            columns = [];\n            rows.push(columns);\n        }\n        // Always set last span to align the end of Descriptions\n        const lastItem = index === itemNodes.length - 1;\n        let lastSpanSame = true;\n        if (lastItem) {\n            lastSpanSame = !itemNode.props.span || itemNode.props.span === leftSpans;\n            itemNode = React.cloneElement(itemNode, {\n                span: leftSpans,\n            });\n        }\n        // Calculate left fill span\n        const { span = 1 } = itemNode.props;\n        columns.push(itemNode);\n        leftSpans -= span;\n        if (leftSpans <= 0) {\n            columns = null;\n            warning(leftSpans === 0 && lastSpanSame, 'Descriptions', 'Sum of column `span` in a line exceeds `column` of Descriptions.');\n        }\n    });\n    return rows;\n};\nconst renderRow = (children, index, { prefixCls }, bordered, layout, colon) => {\n    const renderCol = (colItem, type, idx) => {\n        return (<Col child={colItem} bordered={bordered} colon={colon} type={type} key={`${type}-${colItem.key || idx}`} layout={layout}/>);\n    };\n    const cloneChildren = [];\n    const cloneContentChildren = [];\n    flattenChildren(children).forEach((childrenItem, idx) => {\n        cloneChildren.push(renderCol(childrenItem, 'label', idx));\n        if (layout === 'vertical') {\n            cloneContentChildren.push(renderCol(childrenItem, 'content', idx));\n        }\n        else if (bordered) {\n            cloneChildren.push(renderCol(childrenItem, 'content', idx));\n        }\n    });\n    if (layout === 'vertical') {\n        return [\n            <tr className={`${prefixCls}-row`} key={`label-${index}`}>\n        {cloneChildren}\n      </tr>,\n            <tr className={`${prefixCls}-row`} key={`content-${index}`}>\n        {cloneContentChildren}\n      </tr>,\n        ];\n    }\n    return (<tr className={`${prefixCls}-row`} key={index}>\n      {cloneChildren}\n    </tr>);\n};\nconst defaultColumnMap = {\n    xxl: 3,\n    xl: 3,\n    lg: 3,\n    md: 3,\n    sm: 2,\n    xs: 1,\n};\nclass Descriptions extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            screens: {},\n        };\n    }\n    componentDidMount() {\n        const { column } = this.props;\n        this.token = ResponsiveObserve.subscribe(screens => {\n            if (typeof column !== 'object') {\n                return;\n            }\n            this.setState({\n                screens,\n            });\n        });\n    }\n    componentWillUnmount() {\n        ResponsiveObserve.unsubscribe(this.token);\n    }\n    getColumn() {\n        const { column } = this.props;\n        if (typeof column === 'object') {\n            for (let i = 0; i < responsiveArray.length; i++) {\n                const breakpoint = responsiveArray[i];\n                if (this.state.screens[breakpoint] && column[breakpoint] !== undefined) {\n                    return column[breakpoint] || defaultColumnMap[breakpoint];\n                }\n            }\n        }\n        // If the configuration is not an object, it is a number, return number\n        if (typeof column === 'number') {\n            return column;\n        }\n        // If it is an object, but no response is found, this happens only in the test.\n        // Maybe there are some strange environments\n        return 3;\n    }\n    render() {\n        return (<ConfigConsumer>\n        {({ getPrefixCls }) => {\n            const { className, prefixCls: customizePrefixCls, title, size, children, bordered = false, layout = 'horizontal', colon = true, style, } = this.props;\n            const prefixCls = getPrefixCls('descriptions', customizePrefixCls);\n            const column = this.getColumn();\n            const cloneChildren = flattenChildren(children)\n                .map((child) => {\n                if (React.isValidElement(child)) {\n                    return React.cloneElement(child, {\n                        prefixCls,\n                    });\n                }\n                return null;\n            })\n                .filter((node) => node);\n            const childrenArray = generateChildrenRows(cloneChildren, column);\n            return (<div className={classNames(prefixCls, className, {\n                [`${prefixCls}-${size}`]: size !== 'default',\n                [`${prefixCls}-bordered`]: !!bordered,\n            })} style={style}>\n              {title && <div className={`${prefixCls}-title`}>{title}</div>}\n              <div className={`${prefixCls}-view`}>\n                <table>\n                  <tbody>\n                    {childrenArray.map((child, index) => renderRow(child, index, {\n                prefixCls,\n            }, bordered, layout, colon))}\n                  </tbody>\n                </table>\n              </div>\n            </div>);\n        }}\n      </ConfigConsumer>);\n    }\n}\nDescriptions.defaultProps = {\n    size: 'default',\n    column: defaultColumnMap,\n};\nDescriptions.Item = DescriptionsItem;\nexport default Descriptions;\n","import '../../style/index.less';\nimport './index.less';\n"],"sourceRoot":""}