{"version":3,"sources":["views/Users/User.js"],"names":["User","props","componentDidMount","a","async","token","JSON","parse","localStorage","getItem","setState","getUsers","userData","user","banAction","length","find","_id","toString","match","params","id","status","picture","src","style","height","width","objectFit","borderRadius","alt","getBadge","text","date","Date","toLocaleString","address","Object","values","join","skillCount","skills","wages","requestOptions","method","headers","Authorization","fetch","response","handleResponse","loading","banUserAction","state","data","console","log","then","ok","colors","this","count","map","item","color","skillTag","push","name","email","role","introduction","className","active","spinner","styles","overlay","base","background","stroke","lg","title","bordered","column","xxl","xl","md","sm","xs","Item","label","rate","onClick","type","Component"],"mappings":"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","file":"static/js/25.7c495c2d.chunk.js","sourcesContent":["import React, { Component, useReducer } from 'react';\nimport { Card, CardBody, CardHeader, Col, Row, Table } from 'reactstrap';\nimport { Badge, Button, Descriptions, Tag } from 'antd';\nimport LoadingOverlay from 'react-loading-overlay';\n\nclass User extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: null,\n      loading: true,\n      banAction: false,\n      userData: [],\n      user: null,\n      token: null\n    };\n  }\n\n  componentDidMount = async () => {\n    const token = JSON.parse(localStorage.getItem('token'));\n    if (token) this.setState({ token });\n    const userData = await this.getUsers(token);\n    let user = null;\n    let banAction = false;\n    if (userData.length) {\n      user = userData.find(\n        user => user._id.toString() === this.props.match.params.id\n      );\n\n      if (user) {\n        if (user.status === 'banned') banAction = true;\n        user.picture = (\n          <img\n            src={user.picture}\n            style={{\n              height: 250,\n              width: 250,\n              objectFit: 'cover',\n              borderRadius: 125\n            }}\n            alt=\"profile\"\n          />\n        );\n        user.status = (\n          <Badge status={this.getBadge(user.status)} text={user.status}></Badge>\n        );\n        user.date = new Date(user.date).toLocaleString();\n        user.address = Object.values(user.address).join(', ');\n        user.skillCount = user.skills.length;\n        // user.skills = Object.values(user.skills).join(', ');\n        user.wages = user.wages ? user.wages + ' VND/hour' : 'not assigned';\n      }\n\n      this.setState({ user: user, banAction });\n    }\n  };\n\n  getBadge = status => {\n    return status === 'active'\n      ? 'success'\n      : status === 'inactive'\n      ? 'default'\n      : status === 'banned'\n      ? 'error'\n      : 'primary';\n  };\n\n  getUsers = async token => {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    };\n    try {\n      const response = await fetch(\n        'https://cors-anywhere.herokuapp.com/https://admin-api-tutor.herokuapp.com/me/users',\n        requestOptions\n      );\n\n      let userData = await this.handleResponse(response);\n\n      this.setState({ loading: false, userData: userData });\n\n      return userData;\n    } catch (err) {\n      return err;\n    }\n  };\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n      if (!response.ok) {\n        if (response.status === 401) {\n          // auto logout if 401 response returned from api\n          // logoutUser();\n        }\n\n        // const error = (data && data.message) || response.statusText;\n        // return Promise.reject(error);\n        return data;\n      }\n      return data;\n    });\n  }\n\n  banUserAction = async () => {\n    this.setState({ loading: true });\n    const requestOptions = {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.state.token}`\n      }\n    };\n    try {\n      const response = await fetch(\n        `https://cors-anywhere.herokuapp.com/https://admin-api-tutor.herokuapp.com/me/ban-user/${this.state.user._id}`,\n        requestOptions\n      );\n\n      const data = await this.handleResponse(response);\n      let user = this.state.user;\n      const date = new Date(user.date);\n      user.date = date.toLocaleString();\n      user.status = <Badge status={this.getBadge(data)} text={data}></Badge>;\n\n      this.setState({ loading: false, user, banAction: !this.state.banAction });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  render() {\n    const colors = [\n      'magenta',\n      'cyan',\n      'green',\n      'volcano',\n      'orange',\n      'purple',\n      'lime',\n      'red',\n      'blue',\n      'gold',\n      'geekblue'\n    ];\n    let user = this.state.user;\n    let skills = [];\n    if (user) {\n      let count = -1;\n      user.skills.map(item => {\n        const color = colors[++count % colors.length];\n        const skillTag = <Tag color={color}>{item}</Tag>;\n        skills.push(skillTag);\n      });\n    }\n    if (!user) {\n      user = { id: 'Not found' };\n    }\n\n    const details = [\n      ['Name', user.name],\n      ['Email', user.email],\n      ['Address', user.address],\n      ['Role', user.role],\n      ['Skills', user.skills],\n      ['Date registered', user.date],\n      ['Wages', user.wages],\n      ['Status', user.status],\n      ['Introduction', user.introduction]\n    ];\n\n    return (\n      <div className=\"animated fadeIn\">\n        <LoadingOverlay\n          active={this.state.loading}\n          spinner\n          text=\"Loading...\"\n          styles={{\n            overlay: base => ({\n              ...base,\n              background: 'rgba(255, 255, 255, 0.5)',\n              color: 'black'\n            }),\n            spinner: base => ({\n              ...base,\n              width: '100px',\n              '& svg circle': {\n                stroke: 'rgba(255, 0, 0, 0.5)'\n              }\n            })\n          }}\n        >\n          <Row className=\"justify-content-center\">\n            <Col lg={12}>\n              <Card>\n                <CardHeader className=\"bg-dark\">\n                  <strong>\n                    <i className=\"icon-info pr-1\"></i>User ID:{' '}\n                    {this.props.match.params.id}\n                  </strong>\n                </CardHeader>\n                <CardBody>\n                  <Row>\n                    <Col lg={3} className=\" mt-4\">\n                      <Row className=\"justify-content-center font-weight-bold mb-3\">\n                        <h2 className=\"text-uppercase name-font\">\n                          {user.name}\n                        </h2>\n                      </Row>\n                      <Row className=\"justify-content-center\">\n                        {user.picture}\n                      </Row>\n                    </Col>\n                    <Col className=\"ml-4 mt-4\" lg={8}>\n                      <Descriptions\n                        title=\"User Information\"\n                        bordered\n                        column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                      >\n                        <Descriptions.Item label=\"Role\">\n                          {user.role}\n                        </Descriptions.Item>\n                        <Descriptions.Item label=\"Status\">\n                          {user.status}\n                        </Descriptions.Item>\n                        <Descriptions.Item label=\"Registered\">\n                          {user.date}\n                        </Descriptions.Item>\n                        <Descriptions.Item label=\"Rating\">\n                          {user.rate}\n                        </Descriptions.Item>\n                        <Descriptions.Item label=\"Skills\">\n                          {user.skillCount}\n                        </Descriptions.Item>\n                        <Descriptions.Item label=\"Wages\">\n                          {user.wages}\n                        </Descriptions.Item>\n                        <Descriptions.Item label=\"Info\">\n                          <strong>Email: </strong>\n                          <br /> <span className=\"ml-4 mb-2\">{user.email}</span>\n                          <br />\n                          <strong>Address: </strong>\n                          <br />{' '}\n                          <span className=\"ml-4 mb-2\">{user.address}</span>\n                          <br /> <strong>Skills: </strong>\n                          <br /> <span className=\"ml-4 mb-2\">{skills}</span>\n                          <br />\n                          <strong>Introduction: </strong>\n                          <br />\n                          <span className=\"ml-4 mb-2\">{user.introduction}</span>\n                        </Descriptions.Item>\n                      </Descriptions>\n                      <Row className=\"justify-content-end mt-4 mr-2\">\n                        <Button\n                          onClick={() => this.banUserAction()}\n                          type={this.state.banAction ? 'primary' : 'danger'}\n                        >\n                          {this.state.banAction ? 'Unban' : 'Ban'}\n                        </Button>\n                      </Row>\n                    </Col>\n                  </Row>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </LoadingOverlay>\n      </div>\n    );\n  }\n}\n\nexport default User;\n"],"sourceRoot":""}